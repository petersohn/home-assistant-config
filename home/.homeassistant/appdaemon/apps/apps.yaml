global_modules:
    - mutex_graph
    - expression

locker:
    module: locker
    class: Locker
    global_dependencies: mutex_graph
    enable_logging: false

wind_direction_yr:
    class: WindDirection
    module: wind_direction
    entity: sensor.yr_wind_direction

wind_direction:
    class: WindDirection
    module: wind_direction
    entity: sensor.wind_direction

wind_direction_average_icon:
    class: WindDirection
    module: wind_direction
    entity: sensor.wind_direction_average

heating_pump:
    class: TemperatureBasic
    module: temperature_basic
    dependencies: locker
    sensor_out: sensor.temperature_furnace_wood
    sensor_in: sensor.temperature_furnace_wood_in
    target: switch.heating_pump
    target_difference: 7
    tolerance: 1
    maximum_out: 60
    minimum_out: 30

auto_switch_light_driveway:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_driveway
    switch: input_select.light_driveway
    reentrant: true

auto_switch_light_well:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_well
    switch: input_select.light_well
    reentrant: true

auto_switch_light_gate_reflector:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_gate_reflector
    switch: input_select.light_gate_reflector
    reentrant: true

auto_switch_light_garage:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_garage
    switch: input_select.light_garage
    reentrant: true

auto_switch_light_outside_0:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_0
    switch: input_select.light_outside_0
    reentrant: true

auto_switch_light_outside_1:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_1
    switch: input_select.light_outside_1
    reentrant: true

auto_switch_light_outside_2:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_2
    switch: input_select.light_outside_2
    reentrant: true

auto_switch_light_outside_3:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_3
    switch: input_select.light_outside_3
    reentrant: true

auto_switch_light_outside_4:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_4
    switch: input_select.light_outside_4
    reentrant: true

auto_switch_light_outside_5:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_5
    switch: input_select.light_outside_5
    reentrant: true

auto_switch_light_outside_6:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_outside_6
    switch: input_select.light_outside_6
    reentrant: true

sun_enabler_night:
    module: enabler
    class: ValueEnabler
    dependencies: locker
    entity: binary_sensor.night
    value: 'on'

wind_short_term:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: sensor.wind_strength

wind_direction_short_term:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: sensor.wind_direction

wind_disabler:
    module: enabler
    class: HistoryEnabler
    dependencies:
        - wind_short_term
        - locker
    manager: wind_short_term
    aggregator: max
    max: 50
    interval:
        minutes: 10
    default: 0

wind_direction_average:
    module: history
    class: AggregatedValue
    dependencies:
        - wind_direction_short_term
        - locker
    manager: wind_direction_short_term
    target: sensor.wind_direction_average
    interval:
        minutes: 10
    base_interval:
        seconds: 10
    aggregator: anglemean
    attributes:
        unit_of_measurement: "°"
        friendly_name: "Szélirány"

motion_sensor_driveway_uppest_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: binary_sensor.motion_sensor_driveway_uppest

motion_sensor_driveway_uppest_average:
    module: history
    class: AggregatedValue
    dependencies:
        - motion_sensor_driveway_uppest_history
        - locker
    manager: motion_sensor_driveway_uppest_history
    target: sensor.motion_sensor_driveway_uppest_average
    interval:
        hours: 1
    aggregator: mean
    attributes:
        friendly_name: "Bejáró legfelső"
        icon: mdi:percent

motion_sensor_driveway_uppest_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - sun_enabler_night
        - locker
    expr: >
        e.sun_enabler_night and
        v.sensor.motion_sensor_driveway_uppest_average <= 0.2

motion_sensor_driveway_upper_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: binary_sensor.motion_sensor_driveway_upper

motion_sensor_driveway_upper_average:
    module: history
    class: AggregatedValue
    dependencies:
        - motion_sensor_driveway_upper_history
        - locker
    manager: motion_sensor_driveway_upper_history
    target: sensor.motion_sensor_driveway_upper_average
    interval:
        hours: 1
    aggregator: mean
    attributes:
        friendly_name: "Bejáró felső"
        icon: mdi:percent

motion_sensor_driveway_upper_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - sun_enabler_night
        - locker
    expr: >
        e.sun_enabler_night and
        v.sensor.motion_sensor_driveway_upper_average <= 0.2

motion_sensor_driveway_lower_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: binary_sensor.motion_sensor_driveway_lower

motion_sensor_driveway_lower_average:
    module: history
    class: AggregatedValue
    dependencies:
        - motion_sensor_driveway_lower_history
        - locker
    manager: motion_sensor_driveway_lower_history
    target: sensor.motion_sensor_driveway_lower_average
    interval:
        hours: 1
    aggregator: mean
    attributes:
        friendly_name: "Bejáró alsó"
        icon: mdi:percent

motion_sensor_driveway_lower_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - sun_enabler_night
        - locker
    expr: >
        e.sun_enabler_night and
        v.sensor.motion_sensor_driveway_lower_average <= 0.2

motion_sensor_garage_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: binary_sensor.motion_sensor_garage

motion_sensor_garage_average:
    module: history
    class: AggregatedValue
    dependencies:
        - motion_sensor_garage_history
        - locker
    manager: motion_sensor_garage_history
    target: sensor.motion_sensor_garage_average
    interval:
        hours: 1
    aggregator: mean
    attributes:
        friendly_name: "Garázs"
        icon: mdi:percent

motion_sensor_garage_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - sun_enabler_night
        - is_dark
        - locker
    expr: >
        e.sun_enabler_night or
        (v.input_select.presence_mode == "home" and e.is_dark)

motion_sensor_garage2_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: binary_sensor.motion_sensor_garage2

motion_sensor_garage2_average:
    module: history
    class: AggregatedValue
    dependencies:
        - motion_sensor_garage2_history
        - locker
    manager: motion_sensor_garage2_history
    target: sensor.motion_sensor_garage2_average
    interval:
        hours: 1
    aggregator: mean
    attributes:
        friendly_name: "Garázs 2"
        icon: mdi:percent

motion_sensor_well_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: binary_sensor.motion_sensor_well

motion_sensor_well_average:
    module: history
    class: AggregatedValue
    dependencies:
        - motion_sensor_well_history
        - locker
    manager: motion_sensor_well_history
    target: sensor.motion_sensor_well_average
    interval:
        hours: 1
    aggregator: mean
    attributes:
        friendly_name: "Kút"
        icon: mdi:percent

motion_sensor_well_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - sun_enabler_night
        - locker
    expr: >
        e.sun_enabler_night and
        v.sensor.motion_sensor_well_average <= 0.2

driveway_uppest_reflector_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_gate_reflector
        - motion_sensor_driveway_uppest_enabler
        - locker
    sensor: binary_sensor.motion_sensor_driveway_uppest
    targets:
        - auto_switch_light_gate_reflector
    enabler: motion_sensor_driveway_uppest_enabler
    time: 1

driveway_uppest_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_driveway
        - motion_sensor_driveway_uppest_enabler
        - locker
    sensor: binary_sensor.motion_sensor_driveway_uppest
    targets:
        - auto_switch_light_driveway
    enabler: motion_sensor_driveway_uppest_enabler
    time: 2

driveway_upper_reflector_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_gate_reflector
        - motion_sensor_driveway_upper_enabler
        - locker
    sensor: binary_sensor.motion_sensor_driveway_upper
    targets:
        - auto_switch_light_gate_reflector
    enabler: motion_sensor_driveway_upper_enabler
    time: 1

driveway_upper_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_driveway
        - motion_sensor_driveway_upper_enabler
        - locker
    sensor: binary_sensor.motion_sensor_driveway_upper
    targets:
        - auto_switch_light_driveway
    enabler: motion_sensor_driveway_upper_enabler
    time: 2

driveway_lower_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_driveway
        - motion_sensor_driveway_lower_enabler
        - locker
    sensor: binary_sensor.motion_sensor_driveway_lower
    targets:
        - auto_switch_light_driveway
    enabler: motion_sensor_driveway_lower_enabler
    time: 2

# garage_driveway_motion_sensor:
#     class: TimerSwitch
#     module: timer_switch
#     dependencies:
#         - auto_switch_light_driveway
#         - sun_enabler_night
#         - locker
#     sensor: binary_sensor.motion_sensor_garage
#     targets:
#         - auto_switch_light_driveway
#     enabler: sun_enabler_night
#     time: 2

garage_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_garage
        - motion_sensor_garage_enabler
        - locker
    sensor: binary_sensor.motion_sensor_garage
    targets:
        - auto_switch_light_garage
    enabler: motion_sensor_garage_enabler
    time: 1

garage2_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_garage
        - locker
    sensor: binary_sensor.motion_sensor_garage2
    targets:
        - auto_switch_light_garage
    time: 1

well_motion_sensor:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_light_well
        - motion_sensor_well_enabler
        - locker
    sensor: binary_sensor.motion_sensor_well
    targets:
        - auto_switch_light_well
        - auto_switch_light_driveway
    enabler: motion_sensor_well_enabler
    time: 2

christmas_light_switch_front:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_christmas_front
    switch: input_select.light_christmas_front

christmas_light_switch_tree:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_christmas_tree
    switch: input_select.light_christmas_tree

christmas_light_switch_balcony:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.light_christmas_balcony
    switch: input_select.light_christmas_balcony

christmas_lights_date_enabler:
    module: enabler
    class: DateEnabler
    dependencies: locker
    begin: 11-15
    end: 02-28

christmas_lights_enabler:
    module: enabler
    class: MultiEnabler
    dependencies:
        - christmas_lights_date_enabler
        - sun_enabler_night
        - locker
    enablers:
        - christmas_lights_date_enabler
        - sun_enabler_night

christmas_light_switcher:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - christmas_light_switch_front
        - christmas_light_switch_tree
        - christmas_lights_enabler
        - locker
    global_dependencies:
        - auto_switch
    enabler: christmas_lights_enabler
    targets:
        - christmas_light_switch_front
        - christmas_light_switch_tree

christmas_light_balcony_enabler:
    module: enabler
    class: MultiEnabler
    dependencies:
        - christmas_lights_date_enabler
        - light_outside_2_4_5_6_enabler
        - locker
    enablers:
        - christmas_lights_date_enabler
        - light_outside_2_4_5_6_enabler

christmas_light_balcony_switcher:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - christmas_light_switch_balcony
        - christmas_light_balcony_enabler
        - locker
    global_dependencies:
        - auto_switch
    enabler: christmas_light_balcony_enabler
    targets:
        - christmas_light_switch_balcony

light_outside_switcher_0:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_light_outside_0
        - sun_enabler_night
        - locker
    global_dependencies:
        - auto_switch
    enabler: sun_enabler_night
    targets:
        - auto_switch_light_outside_0

light_outside_switcher_1:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_light_outside_1
        - sun_enabler_night
        - locker
    global_dependencies:
        - auto_switch
    enabler: sun_enabler_night
    targets:
        - auto_switch_light_outside_1

lights_should_be_on:
    module: enabler
    class: ExpressionEnabler
    expr: >
        v.input_select.presence_mode == "home" or (
        v.input_select.presence_mode == "away" and
        int(v.sensor.time[0:2]) > 12)
    dependencies:
        - locker
    global_dependencies:
        - expression

light_outside_2_4_5_6_enabler:
    module: enabler
    class: ExpressionEnabler
    expr: >
        e.sun_enabler_night and e.lights_should_be_on
    dependencies:
        - sun_enabler_night
        - lights_should_be_on
        - locker
    global_dependencies:
        - expression

light_outside_switcher_2_4_5_6:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_light_outside_2
        - auto_switch_light_outside_4
        - auto_switch_light_outside_5
        - auto_switch_light_outside_6
        - locker
        - light_outside_2_4_5_6_enabler
    global_dependencies:
        - auto_switch
    enabler: light_outside_2_4_5_6_enabler
    targets:
        - auto_switch_light_outside_2
        - auto_switch_light_outside_4
        - auto_switch_light_outside_5
        - auto_switch_light_outside_6

sunlight:
    module: expression
    class: Expression
    dependencies:
        - locker
    expr: >
        v.sensor.light_sunlight
        if not v.input_boolean.sunlight_sensor_maintenance
        else 'unavailable'
    target: sensor.light_sunlight_adjusted

is_dark:
    module: enabler
    class: ExpressionEnabler
    delay:
        minutes: 5
    expr: >
        ok.sensor.light_sunlight_adjusted and
        v.sensor.light_sunlight_adjusted <= 50
    dependencies:
        - locker
    global_dependencies:
        - expression

is_sunlight:
    module: enabler
    class: ExpressionEnabler
    delay:
        minutes: 5
    expr: >
        ok.sensor.light_sunlight_adjusted and
        v.sensor.light_sunlight_adjusted > 90
    dependencies:
        - locker
    global_dependencies:
        - expression

is_night_or_dark:
    module: enabler
    class: ExpressionEnabler
    expr: >
        e.lights_should_be_on and
        (e.sun_enabler_night or e.is_dark)
    dependencies:
        - sun_enabler_night
        - lights_should_be_on
        - is_dark
        - locker
    global_dependencies:
        - expression

light_outside_switcher_3:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_light_outside_3
        - is_night_or_dark
        - locker
    global_dependencies:
        - auto_switch
    enabler: is_night_or_dark
    targets:
        - auto_switch_light_outside_3

home_light_switcher:
    class: TimerSequence
    module: timer_switch
    dependencies:
        - auto_switch_light_gate_reflector
        - auto_switch_light_driveway
        - sun_enabler_night
        - locker
    sensor: input_select.presence_mode
    source_state: away
    target_state: home
    enabler: sun_enabler_night
    sequence:
        - targets:
              - auto_switch_light_gate_reflector
              - auto_switch_light_driveway
          time: 5

hot_water_pump_enabler:
    module: enabler
    class: ValueEnabler
    dependencies: locker
    entity: input_select.presence_mode
    value: 'home'

auto_switch_hot_water_pump:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.hot_water_pump
    switch: input_select.hot_water_pump
    reentrant: false

hot_water_pump_backend_timer:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_hot_water_pump
        - hot_water_pump_enabler
        - locker
    expr: >
        v.binary_sensor.cellar_controller_available is not True or
        not ok.sensor.temperature_hot_water or
        v.sensor.temperature_hot_water <= 41
    targets:
        - auto_switch_hot_water_pump
    enabler: hot_water_pump_enabler
    time: 1

no_hot_water:
    module: expression
    class: Expression
    dependencies:
        - locker
    expr: >
        v.input_select.presence_mode == "home" and
        ok.sensor.temperature_hot_water and
        v.sensor.temperature_hot_water < 40
    target: binary_sensor.no_hot_water

rain_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: sensor.rain
    max_interval:
        days: 10

rain_last_day:
    module: history
    class: AggregatedValue
    dependencies:
        - rain_history
        - locker
    manager: rain_history
    target: sensor.rain_last_day
    interval:
        hours: 12
    aggregator: sum
    attributes:
        unit_of_measurement: "mm"
        friendly_name: "Eső 12 óra"
        icon: mdi:weather-rainy

rain_last_hour:
    module: history
    class: AggregatedValue
    dependencies:
        - rain_history
        - locker
    manager: rain_history
    target: sensor.rain_last_hour
    interval:
        hours: 1
    aggregator: sum
    attributes:
        unit_of_measurement: "mm"
        friendly_name: "Eső 1 óra"
        icon: mdi:weather-rainy

rain_decaying:
    module: history
    class: AggregatedValue
    dependencies:
        - rain_history
        - locker
    manager: rain_history
    target: sensor.rain_decaying
    interval:
        days: 1
    fraction: 0.6
    aggregator: decay_sum
    attributes:
        unit_of_measurement: "mm"
        friendly_name: "Eső amortizált"
        icon: mdi:weather-rainy

temperature_history:
    module: history
    class: HistoryManager
    dependencies: locker
    entity: sensor.temperature_outside
    max_interval:
        days: 1

maximum_temperature_last_day:
    module: history
    class: AggregatedValue
    dependencies:
        - temperature_history
        - locker
    manager: temperature_history
    target: sensor.maximum_temperature_last_day
    interval:
        days: 1
    aggregator: max
    attributes:
        unit_of_measurement: "°C"
        friendly_name: "Maximum hőmérséklet 1 nap"
        icon: mdi:thermometer-high

sprinkler_run_time:
    class: Expression
    module: expression
    dependencies:
        - locker
        - rain_decaying
        - maximum_temperature_last_day
    target: sensor.sprinkler_run_time
    expr: >
        (1.2 * v.sensor.maximum_temperature_last_day - 15.0
        - 4.0 * v.sensor.rain_decaying) * 0.8
    attributes:
        unit_of_measurement: min
        friendly_name: "Locsolás idő"
        icon: mdi:timer

sprinkler_run_time_2:
    class: Expression
    module: expression
    dependencies:
        - locker
    target: sensor.sprinkler_run_time_2
    expr: >
        0.8 * v.sensor.maximum_temperature_last_day - 7
    attributes:
        unit_of_measurement: min
        friendly_name: "Locsolás idő 2"
        icon: mdi:timer

sprinkler_enabler:
    module: enabler
    class: ExpressionEnabler
    expr: >
        v.input_boolean.sprinkler and v.sensor.sprinkler_run_time >= 5.0
        and v.sensor.rain_last_day < 1.0
    dependencies:
        - locker
        - sprinkler_run_time
        - rain_last_day
    global_dependencies:
        - expression

auto_switch_sprinkler_1:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.auto_sprinkler1
    switch: input_select.auto_sprinkler1
    reentrant: false

auto_switch_sprinkler_2:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.auto_sprinkler2
    switch: input_select.auto_sprinkler2
    reentrant: false

auto_switch_sprinkler_3:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.auto_sprinkler3
    switch: input_select.auto_sprinkler3
    reentrant: false

auto_switch_sprinkler_cellar:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.auto_sprinkler_cellar
    switch: input_select.auto_sprinkler_cellar
    reentrant: false

auto_switch_balcony_sprinkler:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.balcony_sprinkler
    switch: input_select.balcony_sprinkler
    reentrant: false

sprinkler_timer:
    class: TimerSequence
    module: timer_switch
    dependencies:
        - auto_switch_sprinkler_1
        - auto_switch_sprinkler_2
        - auto_switch_sprinkler_3
        - auto_switch_balcony_sprinkler
        - sprinkler_enabler
        - sprinkler_run_time
        - sprinkler_run_time_2
        - locker
    expr: v.sensor.time == '21:00'
    sequence:
        - targets:
              - auto_switch_sprinkler_1
          time: sensor.sprinkler_run_time
        - targets:
              - auto_switch_sprinkler_2
          time: sensor.sprinkler_run_time
        - targets:
              - auto_switch_sprinkler_3
          time: sensor.sprinkler_run_time
        - targets:
              - auto_switch_balcony_sprinkler
          time: sensor.sprinkler_run_time_2
    enabler: sprinkler_enabler

christmas_tree:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.christmas_tree
    switch: input_select.christmas_tree

christmas_tree_enabler:
    module: enabler
    class: ExpressionEnabler
    expr: >
        v.input_select.presence_mode == "home"
    dependencies:
        - locker
    global_dependencies:
        - expression

christmas_tree_switcher:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - christmas_tree
        - christmas_tree_enabler
        - locker
    global_dependencies:
        - auto_switch
    enabler: christmas_tree_enabler
    targets:
        - christmas_tree

availability_alerts:
    module: alert
    class: AlertAggregator
    target: binary_sensor.availability_alert
    trigger_expr: >
      v.input_select.presence_mode != 'sleep' and
      not v['input_boolean.' + name + '_maintenance'] and (
      not ok['binary_sensor.' + name + '_available'] or
      not v['binary_sensor.' + name + '_available'])
    text_expr: a['binary_sensor.' + name + '_available'].friendly_name
    timeout:
        minutes: 5
    dependencies:
        - locker
    global_dependencies:
        - expression
    sources:
        - furnace_temperature
        - well_controller
        - main_controller
        - main_controller2
        - driveway
        - cellar_controller
        - garage_controller
        - living_room_temperature
        - bedroom_temperature
        - dishwasher_sensor
        - gate_reflector
        - attic_lower
        - dining_room_window
        - dining_room_window_2
        - living_room_window
        - balcony_controller
        - storage_window_1
        - storage_window_2

window_alerts:
    module: alert
    class: AlertAggregator
    target: binary_sensor.window_alert
    trigger_expr: v[name] and v.input_select.presence_mode == 'away'
    text_expr: a[name].friendly_name
    dependencies:
        - locker
    global_dependencies:
        - expression
    sources:
        - binary_sensor.window_bedroom
        - binary_sensor.window_living_room
        - binary_sensor.window_entrance
        - binary_sensor.window_dining_room_2
        - binary_sensor.window_storage_1
        - binary_sensor.window_storage_2
        - binary_sensor.door_main_entrance
        - binary_sensor.door_attic_hatch
        - binary_sensor.door_storage

tracker_changes:
    class: ChangeTracker
    module: history
    entity: person.peti
    dependencies: locker

tracker_last_updated:
    module: expression
    class: Expression
    dependencies:
        - locker
        - tracker_changes
    expr: >
        int((now() - u.tracker_changes).total_seconds()) // 60
    target: sensor.tracker_last_updated
    attributes:
        unit_of_measurement: min

tracker_last_changed:
    module: expression
    class: Expression
    dependencies:
        - locker
        - tracker_changes
    expr: >
        int((now() - c.tracker_changes).total_seconds()) // 60
    target: sensor.tracker_last_changed
    attributes:
        unit_of_measurement: min

tracker_not_updated:
    module: expression
    class: Expression
    dependencies:
        - locker
        - tracker_last_updated
    expr: v.sensor.tracker_last_updated >= 180
    target: binary_sensor.tracker_not_updated

furnace_overheat_warning:
    module: expression
    class: Expression
    dependencies:
        - locker
    expr: >
        ok.sensor.temperature_furnace_wood and
        v.sensor.temperature_furnace_wood > 90
    target: binary_sensor.furnace_overheat
    attributes:
        unit_of_measurement: min

freeze_alerts:
    module: alert
    class: AlertAggregator
    target: binary_sensor.freeze_alert
    trigger_expr: >
      ok[name] and v[name] < 1.0
    text_expr: name[19:]
    dependencies:
        - locker
    global_dependencies:
        - expression
    sources:
        - sensor.temperature_furnace_room
        - sensor.temperature_cellar
        - sensor.temperature_bedroom_upper
        - sensor.temperature_bedroom_lower
        - sensor.temperature_living_room_upper
        - sensor.temperature_living_room_lower
        - sensor.temperature_kitchen

window_blind_shield_1:
    module: enabler
    class: ExpressionEnabler
    expr: >
        v.input_select.season_mode == 'summer' and
        v.sensor.time >= '13:00' and
        v.sensor.time < '18:00'
    dependencies:
        - locker
    global_dependencies:
        - expression

dining_room_window_blind:
    module: cover
    class: CoverController
    dependencies:
        - locker
        - window_blind_shield_1
    global_dependencies:
        - expression
    expr: >
        75 if v.input_select.presence_mode == 'home' and e.window_blind_shield_1
        else 'open' if v.input_select.presence_mode == 'home' or (
        v.input_select.presence_mode == 'sleep' and
        v.binary_sensor.window_entrance) or (
        v.input_select.presence_mode == 'away' and
        e.is_sunlight and
        v.input_select.season_mode == 'winter')
        else 'closed'
    target: cover.dining_room
    mode_switch: input_select.dining_room_window_blind_1
    delay:
      seconds: 30

is_light_enough_to_open_blind:
    module: enabler
    class: ExpressionEnabler
    delay:
        minutes: 5
    expr: >
        not e.sun_enabler_night and not (
        ok.sensor.light_sunlight_adjusted and
        v.sensor.light_sunlight_adjusted <= 30)
    dependencies:
        - sun_enabler_night
        - locker
    global_dependencies:
        - expression

window_blind_shield_2:
    module: enabler
    class: ExpressionEnabler
    expr: >
        v.input_select.season_mode == 'summer' and
        v.sensor.time < '09:00'
    dependencies:
        - locker
    global_dependencies:
        - expression

dining_room_2_window_blind:
    module: cover
    class: CoverController
    dependencies:
        - locker
    global_dependencies:
        - expression
        - is_light_enough_to_open_blind
        - window_blind_shield_2
    expr: >
        75 if v.input_select.presence_mode == 'home' and e.window_blind_shield_2
        else 'open' if v.input_select.presence_mode == 'home' and (
        e.is_light_enough_to_open_blind or v.binary_sensor.window_dining_room_2)
        else 'closed'
    target: cover.dining_room_2
    mode_switch: input_select.dining_room_window_blind_2
    delay:
      seconds: 30

auto_switch_storage_window_blind:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: input_boolean.storage_window_blind_open
    reentrant: true

storage_window_blind_auto_open_enabler:
    module: enabler
    class: ExpressionEnabler
    expr: >
      v.input_select.presence_mode == 'home' and e.is_light_enough_to_open_blind
    dependencies:
        - is_light_enough_to_open_blind
        - locker
    global_dependencies:
        - expression

storage_door_open:
    class: TimerSwitch
    module: timer_switch
    dependencies:
        - auto_switch_storage_window_blind
        - storage_window_blind_auto_open_enabler
        - locker
    sensor: binary_sensor.door_storage
    targets:
        - auto_switch_storage_window_blind
    enabler: storage_window_blind_auto_open_enabler
    time: 30

storage_window_blind_1:
    module: cover
    class: CoverController
    dependencies:
        - locker
        - auto_switch_storage_window_blind
    global_dependencies:
        - expression
    expr: >
        'open' if
        v.input_boolean.storage_window_blind_open or
        v.binary_sensor.window_storage_1
        else 'closed'
    mode_switch: input_select.storage_window_blind_1
    target: cover.storage_1

storage_window_blind_2:
    module: cover
    class: CoverController
    dependencies:
        - locker
        - auto_switch_storage_window_blind
    global_dependencies:
        - expression
    expr: >
        'open' if
        v.input_boolean.storage_window_blind_open or
        v.binary_sensor.window_storage_2
        else 'closed'
    mode_switch: input_select.storage_window_blind_2
    target: cover.storage_2

living_room_window_blind:
    module: cover
    class: CoverController
    dependencies:
        - locker
        - is_light_enough_to_open_blind
    global_dependencies:
        - expression
    expr: >
        'open' if v.input_select.presence_mode == 'home' and (
        e.is_light_enough_to_open_blind or v.binary_sensor.window_living_room)
        else 45 if (v.input_select.presence_mode == 'away' and
        e.is_light_enough_to_open_blind) or (
        v.input_select.presence_mode == 'sleep' and
        v.binary_sensor.window_living_room)
        else 'closed'
    target: cover.living_room
    mode_switch: input_select.living_room_window_blind
    delay:
        seconds: 10

cellar_sprinkler_switcher:
    class: TimerSequence
    module: timer_switch
    dependencies:
        - auto_switch_sprinkler_cellar
        - locker
    sensor: input_boolean.start_sprinkler_cellar
    expr: >
      v.input_boolean.start_sprinkler_cellar or (
      int(v.sensor.date[-2:]) == int(v.input_number.sprinkler_cellar_day) and
      v.sensor.time == '12:00')
    target_state: 'on'
    sequence:
        - targets:
              - auto_switch_sprinkler_cellar
          time: 15

pump_icon:
    class: CustomIcon
    module: custom_icon
    dependencies:
        - locker
    off_icon: mdi:water-pump-off
    on_icon: mdi:water-pump
    entities:
      - switch.well

lightbulb_icon:
    class: CustomIcon
    module: custom_icon
    dependencies:
        - locker
    off_icon: mdi:lightbulb-off
    on_icon: mdi:lightbulb
    entities:
      - switch.light_attic_upstairs
      - switch.light_attic_downstairs
      - switch.light_cellar
      - switch.light_garage

string_lights_icon:
    class: CustomIcon
    module: custom_icon
    dependencies:
        - locker
    off_icon: mdi:string-lights-off
    on_icon: mdi:string-lights
    entities:
      - switch.light_christmas_front
      - switch.light_christmas_balcony

play_icon:
    class: CustomIcon
    module: custom_icon
    dependencies:
        - locker
    off_icon: mdi:stop-circle
    on_icon: mdi:play-circle
    entities:
      - switch.desktop_player

heater_check:
    module: expression
    class: Expression
    dependencies:
        - locker
    expr: >
      min(nums(
      v.sensor.temperature_living_room_upper,
      v.sensor.temperature_bedroom_upper,
      v.sensor.temperature_kitchen,
      v.sensor.daikin_bedroom_inside_temperature,
      v.sensor.daikin_living_room_inside_temperature))
    target: sensor.heater_check

heater_check2:
    module: expression
    class: Expression
    dependencies:
        - locker
    expr: >
      v.sensor.temperature_bedroom_upper or
      v.sensor.temperature_living_room_upper or
      v.sensor.temperature_kitchen
    target: sensor.heater_check2

heater_target:
    module: expression
    class: Expression
    dependencies:
        - locker
    expr: >
      v.input_number.heater_temperature_wood_heating
      if v.input_boolean.wood_heating else
      v.input_number.heater_temperature_normal
    target: sensor.heater_target

air_quality_alert:
    module: alert
    class: AlertAggregator
    target: binary_sensor.air_quality_alert
    trigger_expr: >
      ok.sensor.pm10_outside and
      v[name] and
      v.sensor.pm10_outside > 50
    text_expr: a[name].friendly_name
    dependencies:
        - locker
    global_dependencies:
        - expression
    sources:
        - binary_sensor.window_bedroom
        - binary_sensor.window_living_room
        - binary_sensor.window_entrance

auto_switch_climate_living_room:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.climate_living_room
    switch: input_select.climate_living_room
    reentrant: true

climate_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: >
        True

climate_living_room_switch:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_climate_living_room
        - climate_enabler
        - locker
    enabler: climate_enabler
    targets:
        - auto_switch_climate_living_room

auto_switch_climate_bedroom:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.climate_bedroom
    switch: input_select.climate_bedroom
    reentrant: true

climate_bedroom_switch:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_climate_bedroom
        - climate_enabler
        - locker
    enabler: climate_enabler
    targets:
        - auto_switch_climate_bedroom

is_attic_warm_enough_for_water_heater:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    delay:
        minutes: 30
    expr: >
        not ok.sensor.temperature_attic or v.sensor.temperature_attic > 2

water_heater_enabler:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
        - is_attic_warm_enough_for_water_heater
    expr: >
      e.is_attic_warm_enough_for_water_heater
      or (v.sensor.time >= '10:00' and v.sensor.time <= '19:00')

auto_switch_water_heater:
    module: auto_switch
    class: AutoSwitch
    dependencies: locker
    target: switch.water_heater
    switch: input_select.water_heater
    reentrant: true

water_heater_switch:
    class: EnabledSwitch
    module: enabled_switch
    dependencies:
        - auto_switch_water_heater
        - water_heater_enabler
        - locker
    enabler: water_heater_enabler
    targets:
        - auto_switch_water_heater

#
# target_climate_mode:
#     module: expression
#     class: Expression
#     dependencies:
#         - locker
#     expr: >
#     states:
#       'off': 'off'
#     target: sensor.target_climate_mode
