homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret latitude
  longitude: !secret longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: !secret elevation
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/Budapest
  customize: !include customize.yaml

# Show links to resources in log and frontend
introduction:

# Enables the frontend
frontend:

# Enables configuration UI
config:

http:
  api_password: !secret http_password
  # Uncomment this to add a password (recommended!)
  # api_password: PASSWORD
  # Uncomment this if you are using SSL or running in Docker etc
  # base_url: example.duckdns.org:8123

# Checks for available updates
# Note: This component will send some information about your system to
# the developers to assist with development of Home Assistant.
# For more information, please see:
# https://home-assistant.io/blog/2016/10/25/explaining-the-updater/
updater:

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time.
history:

# View all events in a logbook
logbook:

# Track the sun
sun:

# Weather Prediction
sensor:
  - platform: yr
    state_topic: yr
    monitored_conditions:
      - temperature
      - symbol
      - precipitation
      - windSpeed
      - windDirection
      - humidity
      - cloudiness
  - platform: moon

binary_sensor:
  - platform: rpi_gpio
    ports:
      2: test

rest_command:
  set_wind_icon:
    url: http://localhost:8123/api/states/sensor.yr_wind_direction
    method: post
    payload: >
      {
        "state": "{{ states.sensor.yr_wind_direction.state }}",
        "attributes": {
          "friendly_name": "Wind Direction",
          "unit_of_measurement": "Â°",
          "icon":
            {% if float(states.sensor.yr_wind_direction.state) < 12.5 or float(states.sensor.yr_wind_direction.state) >= 347.5 %}
              "mdi:arrow-down"
            {% elif float(states.sensor.yr_wind_direction.state) < 77.5 %}
              "mdi:arrow-bottom-left"
            {% elif float(states.sensor.yr_wind_direction.state) < 102.5 %}
              "mdi:arrow-left"
            {% elif float(states.sensor.yr_wind_direction.state) < 147.5 %}
              "mdi:arrow-top-left"
            {% elif float(states.sensor.yr_wind_direction.state) < 192.5 %}
              "mdi:arrow-up"
            {% elif float(states.sensor.yr_wind_direction.state) < 237.5 %}
              "mdi:arrow-top-right"
            {% elif float(states.sensor.yr_wind_direction.state) < 282.5 %}
              "mdi:arrow-right"
            {% else %}
              "mdi:arrow-bottom-right"
            {% endif %}
        }
      }

# Text to speech
tts:
  platform: google

group: !include groups.yaml
automation: !include automations.yaml
