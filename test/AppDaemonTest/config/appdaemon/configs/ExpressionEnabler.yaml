enabler1:
    module: enabler
    class: ScriptEnabler
    dependencies: locker

enabler2:
    module: enabler
    class: ScriptEnabler
    dependencies: locker

enablers_and:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
        - enabler1
        - enabler2
    expr: e.enabler1 and e.enabler2

enablers_nand:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
        - enabler1
        - enabler2
    expr: 'not (e.enabler1 and e.enabler2)'

enablers_and_not:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
        - enabler1
        - enabler2
    expr: e.enabler1 and not e.enabler2

enablers_or:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
        - enabler1
        - enabler2
    expr: e.enabler1 or e.enabler2

value_less:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: 'v["sensor.test_input1"] < v["sensor.test_input2"]'

value_equal:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: 'v["sensor.test_input1"] == v["sensor.test_input2"]'

binary_and:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: 'v["binary_sensor.test_input1"] and v["binary_sensor.test_input2"]'

binary_or:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: 'v["binary_sensor.test_input1"] or v["binary_sensor.test_input2"]'

enabler_and_binary_and:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: 'e.enabler1 and v["binary_sensor.test_input1"]'

enabler_and_binary_or:
    module: enabler
    class: ExpressionEnabler
    dependencies:
        - locker
    expr: 'e.enabler1 or v["binary_sensor.test_input1"]'
