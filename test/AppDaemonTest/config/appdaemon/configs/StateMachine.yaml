test_state_machine:
  module: state_machine
  class: StateMachine
  dependencies:
    - locker
  global_dependencies:
    - expression
  actions:
    init_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_1
          value: init value
    foobar_enter:
      service:
        - service: input_text/set_value
          args:
            entity_id: input_text.test_text_1
            value: gone to foobar
        - service: input_text/set_value
          args:
            entity_id: input_text.test_text_2
            value: entered
    foobar_exit:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_2
          value: exited
    baz_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_1
          value: it is baz
    timed_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_1
          value: timed
    timed2_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_1
          value: timed2
    expr_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_2
          value_expr: "'enter ' + v.sensor.expr_value"
    expr_exit:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_2
          value_expr: "'exit ' + v.sensor.expr_value"
    expr_next_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_1
          value: expr next
    init_enter:
      service:
        service: input_text/set_value
        args:
          entity_id: input_text.test_text_1
          value: init value
  states:
    init:
      enter_action: init_enter
    foobar:
      enter_action: foobar_enter
      exit_action: foobar_exit
      switch: input_boolean.test_switch
    baz:
      enter_action: baz_enter
      switch: input_boolean.test_switch2
    timed:
      enter_action: timed_enter
      switch: input_boolean.test_switch3
    timed2:
      enter_action: timed2_enter
    exprd:
      enter_action: expr_enter
      exit_action: expr_exit
      switch: input_boolean.test_switch4
    expr_next:
      enter_action: expr_next_enter
  triggers:
    to_foobar:
      type: condition
      state: init
      expr: >
        v.sensor.test_input == 'foobar'
      next_state: foobar
    to_baz:
      type: condition
      expr: >
        v.sensor.test_input == 'baz'
      next_state: baz
    timed_next:
      type: time
      state: timed
      interval:
        minutes: 1
      next_state: timed2
    timed_off:
      type: time
      state: timed2
      interval:
        seconds: 30
      next_state: init
    to_expr_next:
      type: condition
      expr: >
        v.sensor.test_input == 'expr'
      next_state: expr_next
    from_expr_next:
      state: expr_next
      type: condition
      expr: >
        v.sensor.test_input.startswith('to_')
      next_state_expr: v.sensor.test_input[3:]
  default_state: init
